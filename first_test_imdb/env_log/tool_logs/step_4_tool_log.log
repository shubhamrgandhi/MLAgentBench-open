
===================prompt=====================
Given this python script:
    ```python 
    from datasets import load_dataset
import torch
import pandas as pd

if __name__ == "__main__":
    imdb = load_dataset("imdb")

    #TODO: preprocess data

    #TODO: define model here
    model = None

    #TODO: train model

    #evaluate model and print accuracy on test set, also save the predictions of probabilities per class to submission.csv
    submission = pd.DataFrame(columns=list(range(2)), index=range(len(imdb["test"])))
    acc = 0
    for idx, data in enumerate(imdb["test"]):
        text = data["text"]
        label = data["label"]
        pred = model(text) # TODO: replace with proper prediction
        pred = torch.softmax(pred, dim=0)
        submission.loc[idx] = pred.tolist()
        acc += int(torch.argmax(pred).item() == label)
    print("Accuracy: ", acc/len(imdb["test"]))
    
    submission.to_csv('submission.csv', index_label='idx')
    ```
    Edit the script by following the instruction:
    implement the experiment design
    Provide the full code after the edit, making no other changes. Start the python code with "```python". 

    
===================gemini-pro response (4000)=====================
```python
from datasets import load_dataset
import torch
import pandas as pd

if __name__ == "__main__":
    imdb = load_dataset("imdb")

    # Preprocess data
    imdb = imdb.map(lambda x: {"text": x["text"].lower(), "label": x["label"]})

    # Define model
    class IMDBModel(torch.nn.Module):
        def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim):
            super().__init__()
            self.embedding = torch.nn.Embedding(vocab_size, embedding_dim)
            self.lstm = torch.nn.LSTM(embedding_dim, hidden_dim, batch_first=True)
            self.fc = torch.nn.Linear(hidden_dim, output_dim)

        def forward(self, x):
            x = self.embedding(x)
            x, _ = self.lstm(x)
            x = self.fc(x[:, -1, :])
            return x

    # Initialize model
    model = IMDBModel(len(imdb["train"].unique()), 100, 128, 2)

    # Train model
    optimizer = torch.optim.Adam(model.parameters())
    loss_fn = torch.nn.CrossEntropyLoss()
    epochs = 5
    for epoch in range(epochs):
        for idx, data in enumerate(imdb["train"]):
            text = data["text"]
            label = data["label"]
            text = torch.tensor(text).unsqueeze(0)
            label = torch.tensor(label).unsqueeze(0)
            pred = model(text)
            loss = loss_fn(pred, label)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    # Evaluate model and print accuracy on test set, also save the predictions of probabilities per class to submission.csv
    submission = pd.DataFrame(columns=list(range(2)), index=range(len(imdb["test"])))
    acc = 0
    for idx, data in enumerate(imdb["test"]):
        text = data["text"]
        label = data["label"]
        text = torch.tensor(text).unsqueeze(0)
        pred = model(text)
        pred = torch.softmax(pred, dim=0)
        submission.loc[idx] = pred.tolist()
        acc += int(torch.argmax(pred).item() == label)
    print("Accuracy: ", acc/len(imdb["test"]))

    submission.to_csv('submission.csv', index_label='idx')
```
===================tokens=====================
Number of prompt tokens: 299
Number of sampled tokens: 600


